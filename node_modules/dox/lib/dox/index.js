/*!
 * Dox
 * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var
  sys = require('sys'),
  fs = require('fs'),
  path = require('path'),
  utils = require('./utils'),
  markdown = require('./markdown/lib/markdown.js');

/**
 * Library version.
 */

var version = '0.0.3';

/**
 * Style name.
 *
 * @type String
 */

var style = 'default';

/**
 * Project title.
 *
 * @type String
 */

var title = 'Dont forget to use --title to specify me!';

/**
 * Parse JSDoc.
 * 
 * @type Boolean
 */

var jsdoc = true;

/**
 * Project description.
 * 
 * @type String
 */

var desc = '';

/**
 * Show private code.
 * 
 * @type Boolean
 */

var showPrivate = false;

/**
 * Github url for the ribbon.
 * 
 * @type String
 */

var ribbon = '';

/**
 * Ignore shabang (#!...) in files.
 * 
 * @type Boolean
 */

var ignoreShabang = false;

/**
 * Ignore filename rows in HTML table
 * 
 * @type Boolean
 */

var ignoreFilenames = false;

/**
 * Usage documentation.
 */

var usage = '' +
  'Usage: dox [options] <file ...>\n' +
  '\n' +
  'Options:\n' +
  '  -t, --title STR     Project title\n' +
  '  -d, --desc STR      Project description (markdown)\n' +
  '  -r, --ribbon URL    Github ribbon url\n' +
  '  -s, --style NAME    Document style, available: ["default"]\n' +
  '  -J, --no-jsdoc      Disable jsdoc parsing (coverts to markdown)\n' +
  '  -p, --private       Output private code in documentation\n' +
  '  --ignore-shabang    Ignore shabang (#!...) in files\n' +
  '  --ignore-filenames  Ignore filename rows in HTML table\n' +
  '  --desc-right STR    Text in right column(HTML)\n' +
  '  -v, --version       Output dox library version\n' +
  '  -h, --help          Display help information' +
  '\n';

/**
 * Log the given message.
 *
 * @param {String} msg
 * @api private
 */

function log(msg) {
  sys.error('... ' + msg);
}

/**
 * Splitters map.
 */

var splittersMap = {
  '.js': 'c-like',
  '.c': 'c-like',
  '.h': 'c-like',
  '.cc': 'c-like',
  '.cpp': 'c-like',
  '.hpp': 'c-like',
  '.markdown': 'markdown'
}

/**
 * Split file into blocks, extract description
 *
 *  - foo
 *    - bar
 *  - baz
 *
 * @param {String} file
 * @return {Object}
 * @api public
 */

function splitFile(file) {
  var
    type = path.extname(file),
    splitter;
  
  if (typeof splittersMap[type] === 'string') {
    splittersMap[type] = require("./splitters/" + splittersMap[type]);
  }
  
  splitter = splittersMap[type];
  
  if (!splitter) {
    throw new Error("Splitting for '" + type + "' is not supported");
  }
  
  return splitter.splitFile(file, showPrivate, ignoreShabang);
}

exports.splitFile = splitFile;

/**
 * Parse the given arguments.
 *
 * @param {Array} args
 * @api public
 */

exports.parse = function (args) {
  var
    files = [],
    arg,
    filesSplitted = [],
    file,
    blocks,
    head,
    foot,
    css,
    ribbon = '',
    desc_right = '',
    html = [];
  
  // Require an argument
  function requireArg() {
    if (args.length) {
      return args.shift();
    } else {
      throw new Error(arg + ' requires an argument.');
    }
  }
  
  // Parse arguments
  while (args.length) {
    arg = args.shift();
    switch (arg) {
    case '-h':
    case '--help':
      sys.puts(usage);
      process.exit(0);
      break;
    case '-v':
    case '--version':
      sys.puts(version);
      process.exit(0);
      break;
    case '-t':
    case '--title':
      title = requireArg();
      break;
    case '-d':
    case '--desc':
      desc = requireArg();
      break;
    case '-s':
    case '--style':
      style = requireArg();
      break;
    case '-J':
    case '--no-jsdoc':
      jsdoc = false;
      break;
    case '-p':
    case '--private':
      showPrivate = true;
      break;
    case '-r':
    case '--ribbon':
      ribbon = requireArg();
      break;
    case '--ignore-shabang':
      ignoreShabang = true;
      break;
    case '--ignore-filenames':
      ignoreFilenames = true;
      break;
    case '--desc-rigth':
      desc_right = requireArg();
      break;
    default:
      files.push(arg);
    }
  }
  
  if (files.length) {
    log('parsing ' + files.length + ' file(s)');
    
    // Split files
    log('split files into blocks');
    files.forEach(function (file) {
      log('splitting ' + file);
      filesSplitted = filesSplitted.concat(splitFile(file));
    });
    
    // Style
    log('loading ' + style + ' style');
    head = fs.readFileSync(__dirname + '/styles/' + style + '/head.html', 'utf8');
    foot = fs.readFileSync(__dirname + '/styles/' + style + '/foot.html', 'utf8');
    css = fs.readFileSync(__dirname + '/styles/' + style + '/style.css', 'utf8');
    
    // Substitutions
    head = head.replace(/\{\{title\}\}/g, title).replace(/\{\{style\}\}/, css);
    
    log('render output');
    
    // Print head
    sys.print(head);
    
    // Ribbon
    if (ribbon) {
      sys.print('        <a href="' + ribbon + '">' +
                '<img alt="Fork me on GitHub" id="ribbon"' +
                ' src="http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png">' +
                '</a>\n');
    }
    
    // Start table
    sys.print('        <table id="source"><tbody>\n');
    
    // Render description
    if (desc) {
      desc = markdown.toHTML(desc);
    }
    sys.print('            <tr>\n' +
              '                <td><h1>' + title + '</h1>\n' +
              desc + '\n' +
              '                </td>\n' +
              '                <td>\n' +
              desc_right + '\n' +
              '                </td>\n' +
              '            </tr>\n');
    
    // Render files
    filesSplitted.forEach(function (block) {
      if ((block.type === 'filename') && ignoreFilenames) {
        return;
      }
      
      var cssClass = block.type ? ' class="' +  block.type + '"': '';
      
      html.push('            <tr' + cssClass + '>');
      html.push('                <td>');
      html.push(                     block.comment);
      html.push('                </td>');
      html.push('                <td>');
      html.push(                     block.code);
      html.push('                </td>');
      html.push('            </tr>');
    });
    
    // Output blocks HTML
    sys.puts(html.join('\n'));
    
    // End table
    sys.print('        </tbody></table>\n');
    
    // Print foot
    sys.print(foot);
  } else {
    sys.puts('Files required.');
    sys.puts(usage);
    process.exit(1);
  }
};
