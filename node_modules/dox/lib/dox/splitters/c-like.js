/**
 * Dependencies.
 */

var
  fs = require('fs'),
  path = require('path'),
  utils = require('../utils'),
  koala = require('../koala/lib/koala.js'),
  markdown = require('../markdown/lib/markdown.js');

/**
 * Split file into blocks, extract description
 *
 *  - foo
 *    - bar
 *  - baz
 *
 * @param {String} file
 * @return {Object}
 * @api public
 */

exports.splitFile = function (file, showPrivate, ignoreShabang) {
  var
    str = fs.readFileSync(file, 'utf8'),
    parts,
    blocks = [],
    block,
    i, len,
    part,
    next,
    name;
  
  // Description
  name = path.basename(file).replace(/\..+?$/, '');
  
  blocks.push({
    type: 'filename',
    comment: '<h2 id="' + name + '">' + name + '</h2>',
    code: file
  });
  
  // Split file into parts
  parts = str.split(/\s*\/\*([^]+?)\*\/\s*/g);
  
  // Loop over parts and make comment-code pairs
  for (i = 0, len = parts.length; i < len; i += 1) {
    part = parts[i];
    next = parts[i + 1] || '';
    // Empty
    if (/^\s*$/.test(part)) {
      continue;
    // Ignored comment
    } else if (/^!\s*\*/.test(part)) {
      continue;
    // Ignore shabang
    } else if (/^#!/.test(part) && ignoreShabang) {
      continue;
    } else {
      i += 1;
      // Support @ignore and --private
      if (utils.ignore(part) || (utils.isPrivate(part) && !showPrivate)) {
        continue;
      }
      //Check for comment
      if (/^\*\s*\*/.test(part)) {
        part = part.replace(/^ *\* ?/gm, '');
        blocks.push({
          type: 'code',
          comment: markdown.toHTML(utils.toMarkdown(part)),
          code: '<pre><code>' + koala.render(file, next) + '</code></pre>'
        });
      } else {
        i -= 1;
        blocks.push({
          type: 'code',
          comment: '',
          code: '<pre><code>' + koala.render(file, part) + '</code></pre>'
        });
      }
    }
  }
  
  return blocks;
};

